<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arbitrage Plays</title>
    <style>
        body {
            font-family: 'Roboto', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #001f33;
            color: #ffffff;
        }

        .navbar {
            background-color: #003366;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: #FFFFFF;
        }

        .navbar .logo {
            width: 80px;  
            height: auto;
        }

        .navbar h1 {
            margin: 0;
            display: flex;
            align-items: center;
        }

        .navbar ul {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
        }

        .navbar ul li {
            margin: 0 15px;
        }

        .navbar ul li a {
            color: #ffffff;
            text-decoration: none;
            font-weight: bold;
        }

        .navbar ul li a:hover {
            text-decoration: underline;
        }

        .arbitrage-table {
            width: 100%;
            border-collapse: collapse;
            background-color: #0d2033;
            color: #ffffff;
            overflow-x: auto;
            table-layout: fixed;
        }

        .arbitrage-table th, .arbitrage-table td {
            text-align: center;
            border: 1px solid #243b55;
            padding: 10px;
        }

        .arbitrage-table th {
            padding: 10px;
            background-color: #192841;
            font-weight: bold;
        }

        .table td {
            padding: 10px;
            background-color: #5181d3;
            font-weight: bold;
        }

        .arbitrage-table .action-button {
            padding: 8px 16px;
            background-color: #18d0a3;
            color: #000;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .arbitrage-table .action-button:hover {
            background-color: #12b087;
        }

        .highlight {
            color: #21e6c1;
            font-weight: bold;
        }

        .bet-button {
            background-color: #21e6c1;
            color: #000;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
        }

        .bet-button:hover {
            background-color: #17a589;
        }

        .filter-section {
            margin-top: 10px;
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

        .filter-section select {
            padding: 5px;
            border: none;
            border-radius: 3px;
        }
        
        .follow-button {
            margin-top: 10px;
            padding: 8px 16px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
        }

        .follow-button:hover {
            background-color: #218838;
        }

        .unfollow-button {
            margin-top: 10px;
            padding: 8px 16px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
        }

        .unfollow-button:hover {
            background-color: #c82333;
        }

        .calculate-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }

        .calculate-button:hover {
            background-color: #0056b3;
        }

        .refresh-button {
            margin: 10px 0;
            padding: 8px 16px;
            background-color: #ffa500;
            color: #000;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }

        .refresh-button:hover {
            background-color: #cc8400;
        }

        .sportsbook-logo {
            width: 20px;
            height: 20px;
            vertical-align: middle;
            margin-right: 5px;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <h1><img src="img/LeagueLens.png" alt="LeagueLens" class="logo"></h1>
        <ul>
            <li><a href="home.html">Home</a></li>
            <li><a href="profile.html">Profile</a></li>
        <li><a href="soccer.html">Soccer</a></li>
        <li><a href="arbitrage_betting.html">Arbitrage Betting</a></li>
        <li><a href="arbitrage_calculator.html">Arbitrage Calculator</a></li>
        <li><a href="odds.html">Odds Data</a></li>
        <li><a href="arbitrage_plays">Arbitrage Plays</a></li>
        <li><a href="Profit_Calendar.html">Profit Calendar</a></li>
        <li><a href="Expected_Value_Calculator.html">Expected Value Calculator</a></li>
        </ul>
    </div>

    <div class="content">
        <div class="filter-section">
            <label for="event-filter">Filter by Event:</label>
            <select id="event-filter">
                <option value="all">All</option>
                <option value="nba">NBA</option>
                <option value="soccer">Soccer</option>
            </select>  
            <button class="refresh-button" onclick="window.fetchArbitrageOpportunities()">Refresh Data</button>
        </div> 

        <table class="arbitrage-table">
            <thead>
                <tr>
                    <th>ARB %</th>
                    <th>Event</th>
                    <th>Market</th> <!-- Add Market column -->
                    <th>Books</th>
                    <th>Odds</th>
                    <th>Bet Size</th>
                    <th>Profit</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="arbitrage-table-body"> </tbody>
        </table>
    </div>

    <div class="container">
        <div id="arbitrage-container" class="arbitrage-data">
            <p>Fetching arbitrage opportunities...</p>
        </div>
    </div>

    <script type="module">
        import { getAuth } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
        import { getFirestore, doc, updateDoc, arrayUnion } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
        import { app } from './firebase.js';

        const auth = getAuth(app);
        const db = getFirestore(app);

        const imageMap = {
            "FanDuel": "img/fanduel.png",
            "DraftKings": "img/draftkings.png",
            "BetMGM": "img/betMGM.png",
            "Caesars": "img/caesars.png",
            "PointsBet": "img/pointsbet.png",
            "ESPNBet": "img/espnbet.png",
            "BetRivers": "img/betrivers.png",
            "LowVig.ag": "img/lowvig.png",
            "BetOnline.ag": "img/betonlineag.png",
        };

        function calculateArbitrage(homeOdds, awayOdds, stake) {
            const homeStake = (stake / homeOdds).toFixed(2);
            const awayStake = (stake / awayOdds).toFixed(2);
            const totalInvestment = parseFloat(homeStake) + parseFloat(awayStake);
            const guaranteedProfit = (stake - totalInvestment).toFixed(2);
            const totalARB = (guaranteedProfit/totalInvestment) * 100;

            return {
                homeStake,
                awayStake,
                guaranteedProfit,
                isArbitrage: totalInvestment < stake,
                totalARB
            };
        }

        window.handleFollow = async function(match) {
            try {
                const user = auth.currentUser;
                if (!user) {
                    alert("You need to be logged in to follow plays.");
                    return;
                }

                const userRef = doc(db, "users", user.uid);
                await updateDoc(userRef, {
                    followedArbitragePlays: arrayUnion(match)
                });

                alert(`You are now following: ${match.event}`);
                const followButton = document.querySelector(`[data-event="${match.event}"]`);
                if (followButton) {
                    followButton.textContent = "Unfollow";
                    followButton.classList.remove("follow-button");
                    followButton.classList.add("unfollow-button");
                }
            } catch (error) {
                console.error("Error following arbitrage play:", error);
                alert("Failed to follow this arbitrage play. Please try again.");
            }
        };

        window.fetchArbitrageOpportunities = async function() {
            const arbitrageContainer = document.getElementById('arbitrage-container');
            arbitrageContainer.innerHTML = '';

            try {
                const response = await fetch('/api/odds');
                if (!response.ok) {
                    throw new Error('Failed to fetch odds data');
                }

                const oddsData = await response.json();
                const eplGames = oddsData.filter(game => game.sport_key === 'soccer_epl');

                if (eplGames.length === 0) {
                    arbitrageContainer.innerHTML = '<p>No arbitrage opportunities available.</p>';
                    return;
                }

                const rows = eplGames
                    .map((game) => {
                        const bookmakers = game.bookmakers;
                        if (bookmakers.length < 2) {
                            return `<div class="arbitrage-table">
                                <h2>${game.home_team} vs ${game.away_team}</h2>
                                <p>No arbitrage possible with fewer than 2 bookmakers.</p>
                            </div>`;
                        }

                        const odds = bookmakers.map(bookmaker => {
                            const homeOdds = bookmaker.markets[0]?.outcomes[0]?.price || 0;
                            const awayOdds = bookmaker.markets[0]?.outcomes[1]?.price || 0;
                            let market = bookmaker.markets[0]?.key || "Unknown Market";
                            if (market === "h2h") market = "Moneyline"; // Replace "h2h" with "Moneyline"
                            const logo = imageMap[bookmaker.title] || "img/barcelona.jpg";
                            return { home: homeOdds, away: awayOdds, title: bookmaker.title, logo, market };
                        });

                        const stake = 100; // Example stake

                        const bestHome = odds.reduce((prev, current) => (prev.home > current.home ? prev : current));
                        const bestAway = odds.reduce((prev, current) => (prev.away > current.away ? prev : current));

                        const arbitrage = calculateArbitrage(bestHome.home, bestAway.away, stake);

                        if (!arbitrage.isArbitrage) {
                            return `<div class="arbitrage-table">
                                <h2>${game.home_team} vs ${game.away_team}</h2>
                                <p>No arbitrage opportunities here.</p>
                            </div>`;
                        }

                        return `<tr>    
                                <td>${arbitrage.totalARB.toFixed(2)}%</td>
                                <td>${game.home_team} vs ${game.away_team}</td>
                                <td>${bestHome.market}</td>
                                <td>${bestHome.title} <img src="${bestHome.logo}" alt="${bestHome.title} Logo" class="sportsbook-logo">
                                    ${bestAway.title} <img src="${bestAway.logo}" alt="${bestAway.title} Logo" class="sportsbook-logo"></td>
                                <td>Home: ${bestHome.home}, Away: ${bestAway.away}</td>
                                <td>Home: $${arbitrage.homeStake}, Away:  $${arbitrage.awayStake} </td>
                                <td>$${arbitrage.guaranteedProfit}</td>
                                <td><button class="bet-button">Bet Now</button>
                                    <button class="follow-button" data-event="${game.home_team} vs ${game.away_team}" onclick="handleFollow({
                                        event: '${game.home_team} vs ${game.away_team}',
                                        market: '${bestHome.market}',
                                        arbPercentage: '${arbitrage.totalARB.toFixed(2)}%',
                                        books: '${bestHome.title}, ${bestAway.title}',
                                        odds: 'Home: ${bestHome.home}, Away: ${bestAway.away}',
                                        betSize: 'Home: $${arbitrage.homeStake}, Away: $${arbitrage.awayStake}',
                                        profit: '$${arbitrage.guaranteedProfit}'
                                    })">Track</button>
                                </td>
                            </tr>`;
                    })
                    .join('');

                document.getElementById('arbitrage-table-body').innerHTML = rows;

            } catch (error) {
                console.error('Error fetching arbitrage opportunities:', error);
                arbitrageContainer.innerHTML = '<p>Failed to fetch arbitrage opportunities.</p>';
            }
        }

        fetchArbitrageOpportunities();
    </script>
</body>
</html>
