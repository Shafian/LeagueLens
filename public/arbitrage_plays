<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arbitrage Plays</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
        }

        .navbar {
            background-color: #007bff;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
        }

        .navbar h1 {
            margin: 0;
            font-size: 20px;
        }

        .navbar ul {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
        }

        .navbar ul li {
            margin: 0 10px;
        }

        .navbar ul li a {
            color: white;
            text-decoration: none;
        }

        .navbar ul li a:hover {
            text-decoration: underline;
        }

        .container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            width: 90%;
            max-width: 900px;
            margin: 20px auto;
            text-align: center;
        }

        h1 {
            color: #007bff;
            margin-bottom: 20px;
        }

        .arbitrage-card {
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .arbitrage-card h2 {
            margin: 0;
            font-size: 18px;
            color: #333;
        }

        .arbitrage-card p {
            margin: 5px 0;
            font-size: 14px;
        }

        .follow-button {
            margin-top: 10px;
            padding: 8px 16px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
        }

        .follow-button:hover {
            background-color: #218838;
        }

        .unfollow-button {
            margin-top: 10px;
            padding: 8px 16px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
        }

        .unfollow-button:hover {
            background-color: #c82333;
        }

        .calculate-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }

        .calculate-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <h1>Sports Betting</h1>
        <ul>
            <li><a href="index.html">Home</a></li>
            <li><a href="profile.html">Profile</a></li>
            <li><a href="odds.html">Odds</a></li>
            <li><a href="arbitrage_plays.html">Arbitrage Plays</a></li>
            <li><a href="calculator.html">Calculator</a></li>
        </ul>
    </div>

    <div class="container">
        <h1>Arbitrage Plays</h1>
        <div id="arbitrage-container" class="arbitrage-data">
            <p>Fetching arbitrage opportunities...</p>
        </div>
    </div>

    <script>
        function calculateArbitrage(homeOdds, awayOdds, stake) {
            const homeStake = (stake / homeOdds).toFixed(2);
            const awayStake = (stake / awayOdds).toFixed(2);
            const totalInvestment = parseFloat(homeStake) + parseFloat(awayStake);
            const guaranteedProfit = (stake - totalInvestment).toFixed(2);

            return {
                homeStake,
                awayStake,
                guaranteedProfit,
                isArbitrage: totalInvestment < stake
            };
        }

        function toggleFollowButton(button, match) {
            if (button.classList.contains('follow-button')) {
                button.textContent = 'Unfollow';
                button.classList.remove('follow-button');
                button.classList.add('unfollow-button');
                addToProfile(match);
            } else {
                button.textContent = 'Follow';
                button.classList.remove('unfollow-button');
                button.classList.add('follow-button');
                removeFromProfile(match);
            }
        }

        function addToProfile(match) {
            const profileContainer = document.getElementById('profile-container');
            if (profileContainer) {
                const listItem = document.createElement('li');
                listItem.textContent = match;
                listItem.id = `profile-item-${match}`;
                profileContainer.appendChild(listItem);
            }
        }

        function removeFromProfile(match) {
            const listItem = document.getElementById(`profile-item-${match}`);
            if (listItem) {
                listItem.remove();
            }
        }

        async function fetchArbitrageOpportunities() {
            const arbitrageContainer = document.getElementById('arbitrage-container');
            arbitrageContainer.innerHTML = '<p>Loading...</p>';

            try {
                const response = await fetch('/api/odds');
                if (!response.ok) {
                    throw new Error('Failed to fetch odds data');
                }

                const oddsData = await response.json();
                const eplGames = oddsData.filter(game => game.sport_key === 'soccer_epl');

                if (eplGames.length === 0) {
                    arbitrageContainer.innerHTML = '<p>No arbitrage opportunities available.</p>';
                    return;
                }

                arbitrageContainer.innerHTML = eplGames
                    .map((game) => {
                        const bookmakers = game.bookmakers;
                        if (bookmakers.length < 2) {
                            return `<div class="arbitrage-card">
                                <h2>${game.home_team} vs ${game.away_team}</h2>
                                <p>No arbitrage possible with fewer than 2 bookmakers.</p>
                            </div>`;
                        }

                        const odds = bookmakers.map(bookmaker => {
                            const homeOdds = bookmaker.markets[0]?.outcomes[0]?.price || 0;
                            const awayOdds = bookmaker.markets[0]?.outcomes[1]?.price || 0;
                            return { home: homeOdds, away: awayOdds, title: bookmaker.title };
                        });

                        const stake = 100; // Example stake

                        const bestHome = odds.reduce((prev, current) => (prev.home > current.home ? prev : current));
                        const bestAway = odds.reduce((prev, current) => (prev.away > current.away ? prev : current));

                        const arbitrage = calculateArbitrage(bestHome.home, bestAway.away, stake);

                        if (!arbitrage.isArbitrage) {
                            return `<div class="arbitrage-card">
                                <h2>${game.home_team} vs ${game.away_team}</h2>
                                <p>No arbitrage opportunities here.</p>
                            </div>`;
                        }

                        return `<div class="arbitrage-card">
                            <h2>${game.home_team} vs ${game.away_team}</h2>
                            <p>Home Stake: $${arbitrage.homeStake} (Bookmaker: ${bestHome.title})</p>
                            <p>Away Stake: $${arbitrage.awayStake} (Bookmaker: ${bestAway.title})</p>
                            <p>Guaranteed Profit: $${arbitrage.guaranteedProfit}</p>
                            <button class="follow-button" onclick="toggleFollowButton(this, '${game.home_team} vs ${game.away_team}')">Follow</button>
                        </div>`;
                    })
                    .join('');

            } catch (error) {
                console.error('Error fetching arbitrage opportunities:', error);
                arbitrageContainer.innerHTML = '<p>Failed to fetch arbitrage opportunities.</p>';
            }
        }

        fetchArbitrageOpportunities();
    </script>
</body>
</html>
